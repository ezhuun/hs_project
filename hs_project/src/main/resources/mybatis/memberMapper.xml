<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="spring.mapper.hs.MemberMapperInter">

	<resultMap type="MemberDTO" id="connectMemberMap">
		<result property="no" column="no"/>
		<result property="uuid" column="uuid"/>
		<result property="email" column="email"/>
		<result property="c_code" column="c_code"/>
		<result property="temp_code" column="temp_code"/>
		<result property="passwd" column="passwd"/>
		<result property="name" column="name"/>
		<result property="gender" column="gender"/>
		<result property="birth" column="birth"/>
		<result property="begin_date" column="begin_date"/>
		<result property="regdate" column="regdate"/>
		<result property="session_key" column="session_key"/>
		<result property="session_limit" column="session_limit"/>
		<result property="profile" column="profile"/>
		<result property="lev" column="lev"/>
		<result property="lover.no" column="no_1"/>
		<result property="lover.uuid" column="uuid_1"/>
		<result property="lover.email" column="email_1"/>
		<result property="lover.c_code" column="c_code_1"/>
		<result property="lover.temp_code" column="temp_code_1"/>
		<result property="lover.passwd" column="passwd_1"/>
		<result property="lover.name" column="name_1"/>
		<result property="lover.gender" column="gender_1"/>
		<result property="lover.birth" column="birth_1"/>
		<result property="lover.begin_date" column="begin_date_1"/>
		<result property="lover.regdate" column="regdate_1"/>
		<result property="lover.session_key" column="session_key_1"/>
		<result property="lover.session_limit" column="session_limit_1"/>
		<result property="lover.profile" column="profile_1"/>
		<result property="lover.lev" column="lev_1"/>
		<result property="connect.c_no" column="c_no_2"/>
		<result property="connect.c_code" column="c_code_2"/>
		<result property="connect.d_limit" column="d_limit_2"/>
		<result property="connect.d_status" column="d_status_2"/>
		<result property="connect.d_uuid" column="d_uuid_2"/>
		<result property="connect.u1" column="u1"/>
		<result property="connect.u2" column="u2"/>
	</resultMap>
	
	<select id="getJoinMemberByUuid" parameterType="string" resultMap="connectMemberMap">
	<![CDATA[
		select 
		    a.*,
		
		    b.no as no_1,
		    b.uuid as uuid_1,
		    b.email as email_1,
		    b.c_code as c_code_1,
		    b.temp_code as temp_code_1,
		    b.passwd as passwd_1,
		    b.name as name_1,
		    b.gender as gender_1,
		    b.birth as birth_1,
		    b.begin_date as begin_date_1,
		    b.regdate as regdate_1,
		    b.last_login as last_login_1,
		    b.session_key as session_key_1,
		    b.session_limit as session_limit_1,
		    b.profile as profile_1,
		    b.lev as lev_1,
		    
		    c.c_no as c_no_2,
		    c.c_code as c_code_2,
		    c.d_limit as d_limit_2,
		    c.d_status as d_status_2,
		    c.d_uuid as d_uuid_2,
		    c.u1 as u1_2,
		    c.u2 as u2_2 
		from member a
		    left join member b on b.uuid in (select uuid from member where c_code=a.c_code and uuid!=a.uuid)
		    left join member_connect c on a.c_code = c.c_code
		where
		    a.uuid = #{uuid}
	]]>
	</select>



	<update id="changeMemberDate" parameterType="MemberDTO">
		UPDATE
			member
		SET
			<choose>
				<when test="birth==null">
					begin_date = #{begin_date}
				</when>
				<when test="begin_date==null">
					birth = #{birth}
				</when>
				<otherwise>
					birth = #{birth}, begin_date = #{begin_date}
				</otherwise>
			</choose>
		WHERE
			uuid = #{uuid}
	</update>

	<update id="changeName" parameterType="map">
	<![CDATA[
		UPDATE
			member
		SET
			name = #{name}
		WHERE
			uuid = #{uuid}
	]]>
	</update>


	<delete id="deleteMember">
	<![CDATA[
		DELETE
		FROM
			member
		WHERE
			uuid = #{uuid}
	]]>
	</delete>
	
	<delete id="deleteCode">
	<![CDATA[
		DELETE
		FROM
			member_connect
		WHERE
			c_code = #{code}
			AND d_status = 0
	]]>
	</delete>

	<update id="clearCcode">
	<![CDATA[
		UPDATE
			member
		SET
			c_code = ''
		WHERE
			uuid = #{uuid}
	]]>
	</update>
	
	<update id="deleteMemberConnectU2">
	<![CDATA[
		UPDATE
			member_connect
		SET
			u2 = ''
		WHERE
			c_code = #{code}
			AND d_status = 0
	]]>
	</update>
	
	<update id="changeMemberConnectUUID">
	<![CDATA[
		UPDATE
			member_connect
		SET
			u1 = u2
			, u2 = ''
		WHERE
			c_code = #{code}
			AND d_status = 0
	]]>
	</update>
	
	<update id="tempCodeChange">
	<![CDATA[
		UPDATE
			member
		SET
			temp_code = c_code
		WHERE
			uuid = #{uuid}
	]]>
	</update>
	
	<update id="disabledCode">
	<![CDATA[
		UPDATE
			member_connect
		SET
			d_status = '1'
		WHERE
			c_code = #{temp_code}
			AND d_status = 0
	]]>
	</update>
	
	<update id="disconnectMember">
	<![CDATA[
		UPDATE
			member
		SET
			c_code = ''
			, temp_code = #{code}
		WHERE
			uuid = #{uuid}
	]]>
	</update>
	
	<update id="disconnectMemberConnect">
	<![CDATA[
		UPDATE
			member_connect
		SET
			d_limit = #{d_limit}
			, d_uuid = #{uuid}
		WHERE
			c_code = #{code}
			AND d_status = 0
	]]>
	</update>

	<!-- 비밀번호 변경 by uuid -->
	<update id="changePasswd">
	<![CDATA[
		UPDATE
			member
		SET
			passwd = #{passwd}
		WHERE
			uuid = #{uuid}
	]]>
	</update>
	
	<select id="getCcodebyUuid" resultType="string">
	<![CDATA[
		SELECT NVL(c_code, '')
		FROM member
		WHERE
			uuid = #{uuid}
	]]>
	</select>
	
	<select id="checkMemberWithSessionKey" resultType="MemberDTO">
	<![CDATA[
		SELECT
			*
		FROM
			member
		WHERE
			session_key = #{session_key} AND
			session_limit > sysdate
	]]>
	</select>

	<!-- 로그인 시 session정보를 저장한다 -->
	<update id="keepLogin">
	<![CDATA[
		UPDATE
			member
		SET
			session_key = #{session_key}
			, session_limit = #{session_limit}
		WHERE
			uuid = #{uuid}
	]]>
	</update>
	
	
	<!-- 연결된 계정 정보를 가져온다 -->
	<select id="getConnectedAccount" resultType="MemberDTO">
	<![CDATA[
		SELECT
			uuid
			, email
			, name
			, birth
			, begin_date
			, last_login
			, profile
			, temp_code
			, c_code
			, gender
		FROM member
		WHERE
			c_code = (SELECT c_code FROM MEMBER WHERE uuid = #{uuid})
			AND uuid != #{uuid}
	]]>
	</select>

	<!-- update last_login -->
	<update id="lastLoginUpdate">
	<![CDATA[
		UPDATE member
		SET last_login = sysdate
		WHERE uuid = #{uuid}
	]]>
	</update>

	<!-- update profile -->
	<update id="updateProfile">
	<![CDATA[
		UPDATE member
		SET gender = #{gender}
			, name = #{name}
			, birth = #{birth}
			, begin_date = #{begin_date}
			, last_login = sysdate
		WHERE uuid = #{uuid}
	]]>
	</update>
	
	<!-- update photo -->
	<update id="updatePhoto">
	<![CDATA[
		UPDATE member
		SET profile = #{photo}
		WHERE uuid = #{uuid}
	]]>
	</update>




	<!-- member recoard return by uuid -->
	<select id="getMemberByEmail" resultType="MemberDTO">
	<![CDATA[
		SELECT *
		FROM member
		WHERE email = #{email}
	]]>
	</select>

	<!-- member recoard return by uuid -->
	<select id="getMemberByUuid" resultType="MemberDTO">
	<![CDATA[
		SELECT *
		FROM member
		WHERE uuid = #{uuid}
	]]>
	</select>

	<!-- c_code select -->
	<select id="validCode" resultType="_int">
	<![CDATA[
		SELECT count(*)
		FROM member_connect
		WHERE u2 = #{uuid}
	]]>
	</select>
	
	<!-- member c_code update -->
	<update id="updateMemberCode">
	<![CDATA[
		UPDATE member
		SET c_code = '${code}'
		WHERE temp_code = #{code}
			or uuid = #{uuid}
	]]>
	</update>

	<!-- member_connect u2 update -->
	<update id="updateMemberConnectCode">
	<![CDATA[
		UPDATE member_connect
		SET u2 = '${uuid}'
			, d_limit = ''
			, d_uuid = ''
		WHERE c_code = #{code}
			AND d_status = 0
	]]>
	</update>

	<!-- c_code select -->
	<select id="getCode" resultType="MemberConnectDTO">
	<![CDATA[
		SELECT *
		FROM member_connect
		WHERE c_code = #{code}
			AND d_status = 0
	]]>
	</select>

	<!-- member 테이블 CREATE -->
	<insert id="createMember">
	<![CDATA[
		INSERT INTO member (no, uuid, email, passwd, regdate, last_login, temp_code, lev)
		VALUES(
		    (SELECT NVL(MAX(no+1), 0) FROM member)
		    , #{uuid}
		    , #{email}
		    , #{passwd}
		    , sysdate
		    , sysdate
		    , #{code}
		    , 9
		)
	]]>
	</insert>
	
	<!-- member_connect 테이블 CREATE -->
	<insert id="createMemberConnect">
	<![CDATA[
		INSERT INTO member_connect (c_no, c_code, u1, d_status)
		VALUES(
		   (SELECT NVL(MAX(c_no+1), 0) FROM member_connect)
		   , #{code}
		   , #{uuid}
		   , 0
		)
	]]>
	</insert>
	
	<!-- 이메일 중복 확인 -->
	<select id="duplicateEmail" resultType="_int">
	<![CDATA[
		SELECT count(*)
		FROM member
		WHERE email = #{email}
	]]>
	</select>
	
	<!-- 코드발급시 중복코드방지를 위해 c_code를 모두 가져온다 -->
	<select id="getAllcode" resultType="string">
	<![CDATA[
		SELECT c_code
		FROM member_connect
	]]>
	</select>
	
	
	
 	<!-- 1:n은 list타입을 collection으로 받아야함 -->
	<!-- <resultMap type="MemberDTO" id="MDLJoin">
		<result property="c_code" column="c_code"/>
			<collection property="mdlist" column="c_code" javaType="List" ofType="DiaryDTO" resultMap="MDiary"/>
		</resultMap>
		
		<resultMap type="DiaryDTO" id="MDiary">
			<result property="regdate" column="regdate_1"/>
			<result property="title" column="title"/>
			<result property="filename" column="filename"/>
		</resultMap>
		 -->
	
	<!-- <select id="mainlist" parameterType="String"  resultMap="MDLJoin">
			<![CDATA[
			select c_code,title, filename, regdate_1, rownum 
			from(	select m.c_code,d.title, d.filename, d.regdate as regdate_1
					from member m,diary d
					where m.c_code = #{c_code}
					order by d.regdate desc
				)
			where rownum<=4
			]]>
	</select> -->
	
</mapper>